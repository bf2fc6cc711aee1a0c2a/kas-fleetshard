apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    org.bf2/companion: companion-templates-config-map
  name: companion-templates-config-map
data:
  canary-template: |
    apiVersion: v1
    kind: Template
    metadata:
      name: canary-template
    objects:
      # Canary deployment
      - apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: ${CANARY_DEPLOYMENT}
          namespace: ${CANARY_NAMESPACE}
          labels:
            app.kubernetes.io/managed-by: kas-fleetshard-operator
            app.kubernetes.io/component: canary
            app: ${CANARY_APP}
        spec:
          replicas: 1
          selector:
            matchLabels:
              app.kubernetes.io/managed-by: kas-fleetshard-operator
              app: ${CANARY_APP}
          template:
            metadata:
              labels:
                app.kubernetes.io/managed-by: kas-fleetshard-operator
                app.kubernetes.io/component: canary
                app: ${CANARY_APP}
            spec:
              volumes:
              - name: ${CANARY_VOLUME_NAME}
                secret:
                  secretName: ${CANARY_VOLUME_SECRET}
              containers:
              - name: canary
                image: quay.io/mk-ci-cd/strimzi-canary:0.0.9
                env:
                - name: KAFKA_BOOTSTRAP_SERVERS
                  value: ${CANARY_KAFKA_BOOTSTRAP_SERVERS}
                - name: RECONCILE_INTERVAL_MS
                  value: 5000
                - name: EXPECTED_CLUSTER_SIZE
                  value: ${CANARY_EXPECTED_CLUSTER_SIZE}
                - name: KAFKA_VERSION
                  value: ${CANARY_KAFKA_VERSION}
                - name: TZ
                  value: UTC
                - name: TLS_ENABLED
                  value: true
                - name: TLS_CA_CERT
                  value: /tmp/tls-ca-cert/ca.crt
                - name: SARAMA_LOG_ENABLED
                  valueFrom:
                    configMapKeyRef:
                      name: canary-config
                      key: sarama.log.enabled
                      optional: true
                - name: VERBOSITY_LOG_LEVEL
                  valueFrom:
                    configMapKeyRef:
                      name: canary-config
                      key: verbosity.log.level
                      optional: true
                - name: "TOPIC_CONFIG"
                  value: "retention.ms=600000;segment.bytes=16384"
                ports:
                - containerPort: 8080
                  name: metrics
                resources:
                  limits:
                    cpu: 10m
                    memory: 64Mi
                  requests:
                    cpu: 5m
                    memory: 32Mi
                readinessProbe:
                  httpGet:
                    path: /readiness
                    port: 8080
                  initialDelaySeconds: 15
                  timeoutSeconds: 5
                livenessProbe:
                  httpGet:
                    path: /liveness
                    port: 8080
                  initialDelaySeconds: 15
                  timeoutSeconds: 5
                volumeMounts:
                - name: ${CANARY_VOLUME_NAME}
                  mountPath: /tmp/tls-ca-cert
  admin-server-template: |
    apiVersion: v1
    kind: Template
    metadata:
      name: admin-server-template
    objects:
      # Admin deployment
      - apiVersion: apps/v1
        kind: Deployment
        metadata:
          name: ${KAFKA_ADMIN_SERVER_DEPLOYMENT}
          namespace: ${KAFKA_ADMIN_NAMESPACE}
          labels:
            app.kubernetes.io/managed-by: kas-fleetshard-operator
            app.kubernetes.io/component: adminserver
            app: ${KAFKA_ADMIN_SERVER_APP}
        spec:
          replicas: 1
          selector:
            matchLabels:
              app.kubernetes.io/managed-by: kas-fleetshard-operator
              app: ${KAFKA_ADMIN_SERVER_APP}
          template:
            metadata:
              labels:
                app.kubernetes.io/managed-by: kas-fleetshard-operator
                app.kubernetes.io/component: adminserver
                app: ${KAFKA_ADMIN_SERVER_APP}
            spec:
              volumes:
              - name: ${KAFKA_ADMIN_VOLUME_NAME}
                secret:
                  secretName: ${KAFKA_ADMIN_VOLUME_SECRET}
              containers:
              - name: admin-server
                image: quay.io/mk-ci-cd/kafka-admin-api:0.4.0
                env:
                - name: KAFKA_ADMIN_BOOTSTRAP_SERVERS
                  value: ${KAFKA_ADMIN_BOOTSTRAP_SERVERS}
                - name: KAFKA_ADMIN_BROKER_TLS_ENABLED
                  value: "true"
                - name: KAFKA_ADMIN_TLS_VERSION
                  value: ${KAFKA_ADMIN_TLS_VERSION}
                - name: KAFKA_ADMIN_OAUTH_JWKS_ENDPOINT_URI
                  value: ${KAFKA_ADMIN_OAUTH_JWKS_ENDPOINT_URI}
                - name: KAFKA_ADMIN_OAUTH_VALID_ISSUER_URI
                  value: ${KAFKA_ADMIN_OAUTH_VALID_ISSUER_URI}
                - name: KAFKA_ADMIN_OAUTH_TOKEN_ENDPOINT_URI
                  value: ${KAFKA_ADMIN_OAUTH_TOKEN_ENDPOINT_URI}
                - name: KAFKA_ADMIN_OAUTH_ENABLED
                  value: ${KAFKA_ADMIN_OAUTH_ENABLED}
                - name: CORS_ALLOW_LIST_REGEX
                  value: ${KAFKA_ADMIN_CORS_ALLOW_LIST_REGEX}
                ports:
                - containerPort: 9990
                  name: management
                resources:
                  limits:
                    cpu: 500m
                    memory: 512Mi
                  requests:
                    cpu: 250m
                    memory: 256Mi
                readinessProbe:
                  httpGet:
                    path: /health/liveness
                    port: management
                  initialDelaySeconds: 15
                  timeoutSeconds: 5
                livenessProbe:
                  httpGet:
                    path: /health/liveness
                    port: management
                  initialDelaySeconds: 15
                  timeoutSeconds: 5
                volumeMounts:
                - name: ${KAFKA_ADMIN_VOLUME_NAME}
                  mountPath: /opt/kafka-admin-api/custom-config/