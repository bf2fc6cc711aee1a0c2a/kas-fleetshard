---
kind: "Kafka"
metadata:
  annotations:
    org.bf2.operator/desired-broker-replicas: "3"
  labels:
    app.kubernetes.io/managed-by: "kas-fleetshard-operator"
    ingressType: "sharded"
    managedkafka.bf2.org/strimziVersion: "strimzi-cluster-operator.v0.23.0-4"
    managedkafka.bf2.org/kas-multi-zone: "true"
    managedkafka.bf2.org/kas-zone0: "true"
    managedkafka.bf2.org/kas-zone1: "true"
    managedkafka.bf2.org/kas-zone2: "true"
  name: "test-mk"
  namespace: "test"
  ownerReferences:
  - apiVersion: "managedkafka.bf2.org/v1alpha1"
    kind: "ManagedKafka"
    name: "test-mk"
spec:
  kafka:
    version: "2.6.0"
    replicas: 3
    listeners:
    - name: "external"
      port: 9094
      type: "ingress"
      tls: true
      authentication: !<oauth>
        clientId: "clientId"
        clientSecret:
          secretName: "test-mk-sso-secret"
          key: "ssoClientSecret"
        validIssuerUri: "https://validIssuerEndpointURI"
        checkIssuer: true
        jwksEndpointUri: "https://jwksEndpointURI"
        userNameClaim: "userNameClaim"
        fallbackUserNameClaim: "fallbackUserNameClaim"
        checkAccessTokenType: true
        accessTokenIsJwt: true
        tlsTrustedCertificates:
        - secretName: "test-mk-sso-cert"
          certificate: "keycloak.crt"
        enablePlain: true
        tokenEndpointUri: "https://tokenEndpointURI"
        enableOauthBearer: true
        type: "oauth"
      configuration:
        maxConnections: 1000
        maxConnectionCreationRate: 33
        bootstrap:
          host: "xxx.yyy.zzz"
          annotations:
            "haproxy.router.openshift.io/balance": leastconn
        brokers:
        - broker: 0
          host: "broker-0-xxx.yyy.zzz"
        - broker: 1
          host: "broker-1-xxx.yyy.zzz"
        - broker: 2
          host: "broker-2-xxx.yyy.zzz"
    - name: "oauth"
      port: 9095
      type: "internal"
      tls: true
      authentication: !<oauth>
        clientId: "clientId"
        clientSecret:
          secretName: "test-mk-sso-secret"
          key: "ssoClientSecret"
        validIssuerUri: "https://validIssuerEndpointURI"
        checkIssuer: true
        jwksEndpointUri: "https://jwksEndpointURI"
        userNameClaim: "userNameClaim"
        fallbackUserNameClaim: "fallbackUserNameClaim"
        checkAccessTokenType: true
        accessTokenIsJwt: true
        tlsTrustedCertificates:
        - secretName: "test-mk-sso-cert"
          certificate: "keycloak.crt"
        enableOauthBearer: true
        type: "oauth"
      networkPolicyPeers:
        - podSelector:
            matchLabels:
              app: "test-mk-admin-server"
    - name: "sre"
      port: 9096
      type: "internal"
      tls: false
    authorization:
      type: custom
      authorizerClass: io.bf2.kafka.authorizer.CustomAclAuthorizer
    config:
      ssl.protocol: "TLS"
      client.quota.callback.class: "io.strimzi.kafka.quotas.StaticQuotaCallback"
      transaction.state.log.replication.factor: 3
      auto.create.topics.enable: "false"
      log.message.format.version: "2.6"
      ssl.enabled.protocols: "TLSv1.3,TLSv1.2"
      min.insync.replicas: 2
      offsets.topic.replication.factor: 3
      quota.window.size.seconds: "2"
      transaction.state.log.min.isr: 2
      client.quota.callback.static.storage.soft: "21474836480"
      quota.window.num: "30"
      message.max.bytes: 1048588
      client.quota.callback.static.fetch: "1398101"
      client.quota.callback.static.storage.hard: "21516779480"
      client.quota.callback.static.storage.check-interval: "30"
      client.quota.callback.static.excluded.principal.name.list: "canary-123"
      default.replication.factor: 3
      inter.broker.protocol.version: "2.6"
      client.quota.callback.static.produce: "699050"
      leader.imbalance.per.broker.percentage: 0
      connections.max.reauth.ms: 299000
      create.topic.policy.class.name: io.bf2.kafka.topic.ManagedKafkaCreateTopicPolicy
      strimzi.authorization.custom-authorizer.allowed-listeners: SRE-9096
      strimzi.authorization.custom-authorizer.resource-operations: '{ "cluster": [ "describe", "alter" ], "group": [ "all", "delete", "describe", "read" ], "topic": [ "all", "alter", "alter_configs", "create", "delete", "describe", "describe_configs", "read", "write" ], "transactional_id": [ "all", "describe", "write" ] }'
      strimzi.authorization.custom-authorizer.acl.logging.suppressionWindow.duration: PT300S
      strimzi.authorization.custom-authorizer.acl.logging.suppressionWindow.apis: PRODUCE,FETCH
      strimzi.authorization.custom-authorizer.acl.logging.suppressionWindow.eventCount: 5000
      strimzi.authorization.custom-authorizer.acl.001: default=true;permission=allow;topic=*;operations=describe,describe_configs
      strimzi.authorization.custom-authorizer.acl.002: default=true;permission=allow;group=*;operations=describe
      strimzi.authorization.custom-authorizer.acl.003: default=true;permission=allow;cluster=*;operations=describe
      strimzi.authorization.custom-authorizer.acl.004: permission=deny;cluster=*;operations-except=alter,describe,idempotent_write
      strimzi.authorization.custom-authorizer.acl.005: permission=deny;cluster=*;operations=alter;apis-except=create_acls,delete_acls
      strimzi.authorization.custom-authorizer.acl.006: permission=deny;cluster=*;operations=describe;apis-except=describe_acls
      strimzi.authorization.custom-authorizer.acl.007: permission=allow;cluster=*;operations=idempotent_write
      strimzi.authorization.custom-authorizer.acl.008: priority=1;permission=deny;topic=__consumer_offsets;operations=all
      strimzi.authorization.custom-authorizer.acl.009: priority=1;permission=deny;topic=__transaction_state;operations=all
      strimzi.authorization.custom-authorizer.acl.010: priority=1;permission=deny;topic=__redhat_*;operations=all
      strimzi.authorization.custom-authorizer.acl.011: priority=1;permission=deny;group=__redhat_*;operations=all
      strimzi.authorization.custom-authorizer.acl.012: priority=1;permission=deny;transactional_id=__redhat_*;operations=all
      strimzi.authorization.custom-authorizer.acl.013: priority=1;permission=allow;principal=userid-123;cluster=*;operations=describe;apis=describe_acls
      strimzi.authorization.custom-authorizer.acl.014: priority=1;permission=allow;principal=userid-123;cluster=*;operations=alter;apis=create_acls,delete_acls
      strimzi.authorization.custom-authorizer.acl.015: priority=1;permission=allow;principal=userid-123;topic=*;operations=all
      strimzi.authorization.custom-authorizer.acl.016: priority=1;permission=allow;principal=userid-123;group=*;operations=all
      strimzi.authorization.custom-authorizer.acl.017: priority=1;permission=allow;principal=userid-123;transactional_id=*;operations=all
      strimzi.authorization.custom-authorizer.acl.018: priority=1;permission=allow;principal=canary-123;cluster=*;operations=describe;apis=list_partition_reassignments
      strimzi.authorization.custom-authorizer.acl.019: priority=1;permission=allow;principal=canary-123;cluster=*;operations=alter;apis=alter_partition_reassignments
      strimzi.authorization.custom-authorizer.acl.020: priority=0;permission=allow;principal=canary-123;topic=__redhat_strimzi_canary;operations=create,describe,read,write,alter,alter_configs
      strimzi.authorization.custom-authorizer.acl.021: priority=0;permission=allow;principal=canary-123;group=__redhat_strimzi_canary_group;operations=describe,read
      strimzi.authorization.custom-authorizer.acl.022: priority=1;permission=deny;principal=canary-123;topic=*;operations=all
      strimzi.authorization.custom-authorizer.acl.023: priority=1;permission=deny;principal=canary-123;group=*;operations=all
      strimzi.authorization.custom-authorizer.acl.024: priority=1;permission=deny;principal=canary-123;transactional_id=*;operations=all
      strimzi.authorization.custom-authorizer.acl.logging.001: cluster=*;apis=fetch,list_groups,describe_configs;level=DEBUG
      strimzi.authorization.custom-authorizer.acl.logging.002: topic=*;apis=list_offsets;level=DEBUG
      strimzi.authorization.custom-authorizer.acl.logging.003: topic=*;operations=describe;level=DEBUG
      strimzi.authorization.custom-authorizer.acl.logging.004: priority=1;topic=__redhat_strimzi_canary;operations=describe,read,write;level=DEBUG
      strimzi.authorization.custom-authorizer.acl.logging.005: group=*;apis=offset_fetch,offset_commit,heartbeat,describe_groups;level=DEBUG
    storage: !<jbod>
      volumes:
      - !<persistent-claim>
        type: "persistent-claim"
        size: "32254197720"
        class: "gp2"
        id: 0
        deleteClaim: true
      type: "jbod"
    rack:
      topologyKey: "topology.kubernetes.io/zone"
    jvmOptions:
      "-Xmx": "6442450944"
      "-Xms": "6442450944"
      "-XX":
        ExitOnOutOfMemoryError: "true"
      javaSystemProperties:
        - name: com.sun.management.jmxremote.port
          value: "9999"
        - name: com.sun.management.jmxremote.host
          value: "127.0.0.1"
        - name: java.rmi.server.hostname
          value: "127.0.0.1"
    resources:
      limits:
        memory: "19Gi"
        cpu: "4500m"
      requests:
        memory: "19Gi"
        cpu: "4500m"
    metricsConfig: !<jmxPrometheusExporter>
      type: "jmxPrometheusExporter"
      valueFrom:
        configMapKeyRef:
          key: "jmx-exporter-config"
          name: "test-mk-kafka-metrics"
    logging:
      type: external
      valueFrom:
        configMapKeyRef:
          key: log4j.properties
          name: test-mk-kafka-logging
          optional: false
    template:
      pod:
        topologySpreadConstraints:
          - labelSelector:
               matchExpressions:
               - key: "strimzi.io/name"
                 operator: "In"
                 values:
                 - "test-mk-kafka"
            maxSkew: 1
            topologyKey: topology.kubernetes.io/zone
            whenUnsatisfiable: DoNotSchedule
        tolerations:
          - effect: "NoExecute"
            key: "org.bf2.operator/kafka-broker"
            operator: "Exists"
  zookeeper:
    replicas: 3
    storage: !<persistent-claim>
      type: "persistent-claim"
      size: "10Gi"
      class: "gp2"
      deleteClaim: true
    jvmOptions:
      "-Xmx": "1G"
      "-Xms": "1G"
      "-XX":
        ExitOnOutOfMemoryError: "true"
    resources:
      limits:
        memory: "4Gi"
        cpu: "1000m"
      requests:
        memory: "4Gi"
        cpu: "1000m"
    metricsConfig: !<jmxPrometheusExporter>
      type: "jmxPrometheusExporter"
      valueFrom:
        configMapKeyRef:
          key: "jmx-exporter-config"
          name: "test-mk-zookeeper-metrics"
    logging:
      type: external
      valueFrom:
        configMapKeyRef:
          key: log4j.properties
          name: test-mk-zookeeper-logging
          optional: false
    template:
      pod:
        topologySpreadConstraints:
        - labelSelector:
            matchExpressions:
            - key: "strimzi.io/name"
              operator: "In"
              values:
              - "test-mk-zookeeper"
          maxSkew: 1
          topologyKey: "topology.kubernetes.io/zone"
          whenUnsatisfiable: "DoNotSchedule"
  kafkaExporter:
    resources:
      limits:
        memory: "256Mi"
        cpu: "1000m"
      requests:
        memory: "256Mi"
        cpu: "500m"
