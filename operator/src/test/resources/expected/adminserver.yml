---
apiVersion: "apps/v1"
kind: "Deployment"
metadata:
  labels:
    app.kubernetes.io/managed-by: "kas-fleetshard-operator"
    app: "test-mk-admin-server"
    app.kubernetes.io/component: "adminserver"
  name: "test-mk-admin-server"
  namespace: "test"
  ownerReferences:
  - apiVersion: "managedkafka.bf2.org/v1alpha1"
    kind: "ManagedKafka"
    name: "test-mk"
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/managed-by: "kas-fleetshard-operator"
      app: "test-mk-admin-server"
  template:
    metadata:
      labels:
        app.kubernetes.io/managed-by: "kas-fleetshard-operator"
        app: "test-mk-admin-server"
        app.kubernetes.io/component: "adminserver"
    spec:
      affinity:
       podAffinity:
         preferredDuringSchedulingIgnoredDuringExecution:
         - podAffinityTerm:
             labelSelector:
               matchExpressions:
               - key: "strimzi.io/name"
                 operator: "In"
                 values:
                 - "test-mk-zookeeper"
             topologyKey: "kubernetes.io/hostname"
           weight: 100    
      containers:
      - env:
        - name: "KAFKA_ADMIN_BOOTSTRAP_SERVERS"
          value: "test-mk-kafka-bootstrap:9095"
        - name: "KAFKA_ADMIN_BROKER_TLS_ENABLED"
          value: "true"
        - name: "KAFKA_ADMIN_BROKER_TRUSTED_CERT"
          valueFrom:
            secretKeyRef:
              key: "ca.crt"
              name: "test-mk-cluster-ca-cert"
              optional: false
        - name: "KAFKA_ADMIN_ACL_RESOURCE_OPERATIONS"
          value: "{ \"cluster\": [ \"describe\", \"alter\" ], \"group\": [ \"all\"\
            , \"delete\", \"describe\", \"read\" ], \"topic\": [ \"all\", \"alter\"\
            , \"alter_configs\", \"create\", \"delete\", \"describe\", \"describe_configs\"\
            , \"read\", \"write\" ], \"transactional_id\": [ \"all\", \"describe\"\
            , \"write\" ] }"
        - name: "KAFKA_ADMIN_OAUTH_ENABLED"
          value: "false"
        image: "quay.io/mk-ci-cd/kafka-admin-api:0.6.1-3"
        livenessProbe:
          httpGet:
            path: "/health/liveness"
            port: "management"
          initialDelaySeconds: 15
          timeoutSeconds: 5
        name: "admin-server"
        ports:
          - containerPort: 8080
            name: "http"
          - containerPort: 9990
            name: "management"
        readinessProbe:
          httpGet:
            path: "/health/liveness"
            port: "management"
          initialDelaySeconds: 15
          timeoutSeconds: 5
        resources:
          limits:
            memory: "512Mi"
            cpu: "500m"
          requests:
            memory: "512Mi"
            cpu: "500m"
        volumeMounts:
          - mountPath: "/opt/kafka-admin-api/custom-config/"
            name: "test-mk-config-volume"
      volumes:
        - configMap:
            name: "test-mk-admin-server"
            optional: true
          name: "test-mk-config-volume"
