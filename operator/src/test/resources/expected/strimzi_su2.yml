---
kind: "Kafka"
metadata:
  annotations:
    org.bf2.operator/desired-broker-replicas: "6"
  labels:
    app.kubernetes.io/managed-by: "kas-fleetshard-operator"
    ingressType: "sharded"
    managedkafka.bf2.org/strimziVersion: "strimzi-cluster-operator.v0.23.0-4"
    managedkafka.bf2.org/kas-multi-zone: "true"
    managedkafka.bf2.org/kas-zone0: "true"
    managedkafka.bf2.org/kas-zone1: "true"
    managedkafka.bf2.org/kas-zone2: "true"
  name: "test-mk"
  namespace: "test"
  ownerReferences:
    - apiVersion: "managedkafka.bf2.org/v1alpha1"
      kind: "ManagedKafka"
      name: "test-mk"
spec:
  kafka:
    version: "2.6.0"
    replicas: 6
    listeners:
      - name: "external"
        port: 9094
        type: "ingress"
        tls: true
        authentication:
          clientId: "clientId"
          clientSecret:
            secretName: "test-mk-sso-secret"
            key: "ssoClientSecret"
          validIssuerUri: "https://validIssuerEndpointURI"
          checkIssuer: true
          jwksEndpointUri: "https://jwksEndpointURI"
          userNameClaim: "userNameClaim"
          fallbackUserNameClaim: "fallbackUserNameClaim"
          checkAccessTokenType: true
          accessTokenIsJwt: true
          tlsTrustedCertificates:
            - secretName: "test-mk-sso-cert"
              certificate: "keycloak.crt"
          enablePlain: true
          tokenEndpointUri: "https://tokenEndpointURI"
          enableOauthBearer: true
          type: "oauth"
        configuration:
          bootstrap:
            host: "xxx.yyy.zzz"
            annotations:
              haproxy.router.openshift.io/balance: "leastconn"
          brokers:
            - broker: 0
              host: "broker-0-xxx.yyy.zzz"
            - broker: 1
              host: "broker-1-xxx.yyy.zzz"
            - broker: 2
              host: "broker-2-xxx.yyy.zzz"
            - broker: 3
              host: "broker-3-xxx.yyy.zzz"
            - broker: 4
              host: "broker-4-xxx.yyy.zzz"
            - broker: 5
              host: "broker-5-xxx.yyy.zzz"
          createBootstrapService: true
          maxConnections: 33
          maxConnectionCreationRate: 16
      - name: "oauth"
        port: 9095
        type: "internal"
        tls: true
        authentication:
          clientId: "clientId"
          clientSecret:
            secretName: "test-mk-sso-secret"
            key: "ssoClientSecret"
          validIssuerUri: "https://validIssuerEndpointURI"
          checkIssuer: true
          jwksEndpointUri: "https://jwksEndpointURI"
          userNameClaim: "userNameClaim"
          fallbackUserNameClaim: "fallbackUserNameClaim"
          checkAccessTokenType: true
          accessTokenIsJwt: true
          tlsTrustedCertificates:
            - secretName: "test-mk-sso-cert"
              certificate: "keycloak.crt"
          enableOauthBearer: true
          type: "oauth"
        networkPolicyPeers:
          - podSelector:
              matchLabels:
                app: "test-mk-admin-server"
      - name: "sre"
        port: 9096
        type: "internal"
        tls: false
        networkPolicyPeers:
        - podSelector:
            matchLabels:
              strimzi.io/name: test-mk-kafka
    config:
      auto.create.topics.enable: "false"
      min.insync.replicas: 2
      create.topic.policy.class.name: "io.bf2.kafka.topic.ManagedKafkaCreateTopicPolicy"
      alter.config.policy.class.name: "io.bf2.kafka.config.ManagedKafkaAlterConfigPolicy"
      client.quota.callback.static.excluded.principal.name.list: "canary-123"
      default.replication.factor: 3
      client.quota.callback.static.fetch: "34952533"
      message.max.bytes: 1048588
      transaction.state.log.replication.factor: 3
      log.message.format.version: "2.6"
      connections.max.reauth.ms: 299000
      quota.window.size.seconds: "2"
      quota.window.num: "30"
      client.quota.callback.static.storage.check-interval: "30"
      client.quota.callback.usageMetrics.topic: __redhat_strimzi_volumeUsageMetrics
      client.quota.callback.quotaPolicy.check-interval: "15"
      client.quota.callback.kafka.clientIdPrefix: __redhat_strimzi
      offsets.topic.replication.factor: 3
      connection.failed.authentication.delay.ms: 1000
      transaction.state.log.min.isr: 2
      client.quota.callback.static.storage.soft: "366503875925"
      inter.broker.protocol.version: "2.6"
      client.quota.callback.static.produce: "17476266"
      ssl.protocol: "TLS"
      sasl.server.max.receive.size: 16384
      client.quota.callback.class: "io.strimzi.kafka.quotas.StaticQuotaCallback"
      ssl.enabled.protocols: "TLSv1.3,TLSv1.2"
      client.quota.callback.static.storage.hard: "366503875925"
      leader.imbalance.per.broker.percentage: 0
      num.recovery.threads.per.data.dir: 4

      kas.authorizer.acl.001: "default=true;permission=allow;topic=*;operations=describe,describe_configs"
      kas.authorizer.acl.002: "default=true;permission=allow;group=*;operations=describe"
      kas.authorizer.acl.003: "default=true;permission=allow;cluster=*;operations=describe"
      kas.authorizer.acl.004: "permission=deny;cluster=*;operations-except=alter,describe,idempotent_write"
      kas.authorizer.acl.005: "permission=deny;cluster=*;operations=alter;apis-except=create_acls,delete_acls"
      kas.authorizer.acl.006: "permission=deny;cluster=*;operations=describe;apis-except=describe_acls"
      kas.authorizer.acl.007: "permission=allow;cluster=*;operations=idempotent_write"
      kas.authorizer.acl.008: "priority=1;permission=deny;topic=__consumer_offsets;operations=all"
      kas.authorizer.acl.009: "priority=1;permission=deny;topic=__transaction_state;operations=all"
      kas.authorizer.acl.010: "priority=1;permission=deny;topic=__redhat_*;operations=all"
      kas.authorizer.acl.011: "priority=1;permission=deny;group=__redhat_*;operations=all"
      kas.authorizer.acl.012: "priority=1;permission=deny;transactional_id=__redhat_*;operations=all"
      kas.authorizer.acl.013: "priority=1;permission=allow;principal=userid-123;cluster=*;operations=describe;apis=describe_acls"
      kas.authorizer.acl.014: "priority=1;permission=allow;principal=userid-123;cluster=*;operations=alter;apis=create_acls,delete_acls"
      kas.authorizer.acl.015: "priority=1;permission=allow;principal=userid-123;topic=*;operations=all"
      kas.authorizer.acl.016: "priority=1;permission=allow;principal=userid-123;group=*;operations=all"
      kas.authorizer.acl.017: "priority=1;permission=allow;principal=userid-123;transactional_id=*;operations=all"
      kas.authorizer.acl.018: "priority=0;permission=allow;principal=canary-123;cluster=*;operations=describe;apis=list_partition_reassignments"
      kas.authorizer.acl.019: "priority=0;permission=allow;principal=canary-123;cluster=*;operations=alter;apis=alter_partition_reassignments"
      kas.authorizer.acl.020: "priority=0;permission=allow;principal=canary-123;topic=__redhat_strimzi_canary;operations=create,describe,read,write,alter,alter_configs"
      kas.authorizer.acl.021: "priority=0;permission=allow;principal=canary-123;group=__redhat_strimzi_canary_group;operations=describe,read"
      kas.authorizer.acl.022: "priority=1;permission=deny;principal=canary-123;topic=*;operations=all"
      kas.authorizer.acl.023: "priority=1;permission=deny;principal=canary-123;group=*;operations=all"
      kas.authorizer.acl.024: "priority=1;permission=deny;principal=canary-123;transactional_id=*;operations=all"
      kas.authorizer.acl.logging.001: "cluster=*;listeners=(REPLICATION-9091|CONTROLPLANE-9090);operations=describe,read;level=DEBUG"
      kas.authorizer.acl.logging.002: "topic=*;listeners=(REPLICATION-9091|CONTROLPLANE-9090);operations=describe,read;level=DEBUG"
      kas.authorizer.acl.logging.003: "cluster=*;apis=fetch,list_groups,describe_configs;level=DEBUG"
      kas.authorizer.acl.logging.004: "topic=*;apis=list_offsets;level=DEBUG"
      kas.authorizer.acl.logging.005: "topic=*;operations=describe;level=DEBUG"
      kas.authorizer.acl.logging.006: "priority=1;topic=__redhat_*;operations=describe,read,write;level=DEBUG"
      kas.authorizer.acl.logging.007: "group=*;apis=offset_fetch,offset_commit,heartbeat,describe_groups,list_groups;level=DEBUG"
      kas.authorizer.acl.logging.suppressionWindow.apis: "PRODUCE,FETCH,JOIN_GROUP,SYNC_GROUP,OFFSET_COMMIT,ADD_PARTITIONS_TO_TXN,ADD_OFFSETS_TO_TXN,TXN_OFFSET_COMMIT,END_TXN"
      kas.authorizer.acl.logging.suppressionWindow.duration: "PT300S"
      kas.authorizer.acl.logging.suppressionWindow.eventCount: 5000
      kas.authorizer.allowed-listeners: "SRE-9096"
      kas.authorizer.resource-operations: "{ \"cluster\"\
        : [ \"describe\", \"alter\" ], \"group\": [ \"all\", \"delete\", \"describe\"\
        , \"read\" ], \"topic\": [ \"all\", \"alter\", \"alter_configs\", \"create\"\
        , \"delete\", \"describe\", \"describe_configs\", \"read\", \"write\" ], \"\
        transactional_id\": [ \"all\", \"describe\", \"write\" ] }"
      kas.policy.create-topic.partition-counter.private-topic-prefix: "__redhat_"
      kas.policy.create-topic.partition-counter.schedule-interval-seconds: 15
      kas.policy.create-topic.partition-counter.timeout-seconds: 10
      kas.policy.create-topic.partition-limit-enforced: true
      kas.policy.shared-admin.adminclient-listener.name: "controlplane-9090"
      kas.policy.shared-admin.adminclient-listener.port: 9090
      kas.policy.shared-admin.adminclient-listener.protocol: "SSL"
      kas.policy.topic-config.topic-config-policy-enforced: true
      kas.policy.topic-config.enforced: "flush.ms:9223372036854775807,index.interval.bytes:4096,compression.type:producer,flush.messages:9223372036854775807,min.cleanable.dirty.ratio:0.5,file.delete.delay.ms:60000,segment.index.bytes:10485760,preallocate:false,unclean.leader.election.enable:false,min.insync.replicas:2"
      kas.policy.topic-config.range: "max.message.bytes::1048588,segment.bytes:52428800:,segment.ms:600000:"
      kas.policy.topic-config.mutable: "message.timestamp.difference.max.ms,message.timestamp.type,retention.bytes,retention.ms,min.compaction.lag.ms,cleanup.policy,max.compaction.lag.ms,delete.retention.ms,message.downconversion.enable"

      max.partitions: 3000
      cruise.control.metrics.topic.min.insync.replicas: 2
    storage:
      volumes:
        - type: "persistent-claim"
          size: "397204363631"
          deleteClaim: true
          id: 0
      type: "jbod"
    authorization:
      type: "custom"
      authorizerClass: "io.bf2.kafka.authorizer.CustomAclAuthorizer"
    rack:
      topologyKey: "topology.kubernetes.io/zone"
    jvmOptions:
      javaSystemProperties:
        - name: "com.sun.management.jmxremote.port"
          value: "9999"
        - name: "com.sun.management.jmxremote.rmi.port"
          value: "9999"
        - name: "com.sun.management.jmxremote.host"
          value: "127.0.0.1"
        - name: "java.rmi.server.hostname"
          value: "127.0.0.1"
      "-Xmx": "6442450944"
      "-Xms": "6442450944"
      "-XX":
        ExitOnOutOfMemoryError: "true"
    resources:
      limits:
        memory: "17.3Gi"
        cpu: "4900m"
      requests:
        memory: "17.3Gi"
        cpu: "4900m"
    metricsConfig:
      type: "jmxPrometheusExporter"
      valueFrom:
        configMapKeyRef:
          key: "jmx-exporter-config"
          name: "test-mk-kafka-metrics"
    logging:
      type: "external"
      valueFrom:
        configMapKeyRef:
          key: "log4j.properties"
          name: "test-mk-kafka-logging"
          optional: false
    template:
      pod:
        imagePullSecrets:
          - name: "myimage:0.0.1"
        tolerations:
          - effect: "NoExecute"
            key: "org.bf2.operator/kafka-broker"
            operator: "Exists"
        topologySpreadConstraints:
          - labelSelector:
              matchExpressions:
                - key: "strimzi.io/name"
                  operator: "In"
                  values:
                    - "test-mk-kafka"
            maxSkew: 1
            topologyKey: "topology.kubernetes.io/zone"
            whenUnsatisfiable: "DoNotSchedule"
  zookeeper:
    replicas: 3
    storage:
      type: "persistent-claim"
      size: "10Gi"
      deleteClaim: true
    jvmOptions:
      "-Xmx": "1G"
      "-Xms": "1G"
      "-XX":
        ExitOnOutOfMemoryError: "true"
    resources:
      limits:
        memory: "4Gi"
        cpu: "1000m"
      requests:
        memory: "4Gi"
        cpu: "1000m"
    metricsConfig:
      type: "jmxPrometheusExporter"
      valueFrom:
        configMapKeyRef:
          key: "jmx-exporter-config"
          name: "test-mk-zookeeper-metrics"
    logging:
      type: "external"
      valueFrom:
        configMapKeyRef:
          key: "log4j.properties"
          name: "test-mk-zookeeper-logging"
          optional: false
    template:
      pod:
        imagePullSecrets:
          - name: "myimage:0.0.1"
        topologySpreadConstraints:
          - labelSelector:
              matchExpressions:
                - key: "strimzi.io/name"
                  operator: "In"
                  values:
                    - "test-mk-zookeeper"
            maxSkew: 1
            topologyKey: "topology.kubernetes.io/zone"
            whenUnsatisfiable: "DoNotSchedule"
  kafkaExporter:
    resources:
      limits:
        memory: "256Mi"
        cpu: "1000m"
      requests:
        memory: "256Mi"
        cpu: "500m"
    template:
      pod:
        metadata:
          annotations:
            cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
        imagePullSecrets:
          - name: "myimage:0.0.1"
  cruiseControl:
    resources:
      limits:
        memory: "2Gi"
        cpu: "500m"
      requests:
        memory: "2Gi"
        cpu: "250m"
    logging:
      type: external
      valueFrom:
        configMapKeyRef:
          key: log4j2.properties
          name: test-mk-cruise-control-logging
          optional: true
    metricsConfig:
      type: jmxPrometheusExporter
      valueFrom:
        configMapKeyRef:
          name: test-mk-cruise-control-metrics
          key: jmx-exporter-config
    template:
      pod:
        metadata:
          annotations:
            cluster-autoscaler.kubernetes.io/safe-to-evict: "true"
        imagePullSecrets:
          - name: "myimage:0.0.1"
    config:
      default.goals: com.linkedin.kafka.cruisecontrol.analyzer.goals.RackAwareGoal,com.linkedin.kafka.cruisecontrol.analyzer.goals.DiskUsageDistributionGoal
      hard.goals: com.linkedin.kafka.cruisecontrol.analyzer.goals.RackAwareGoal,com.linkedin.kafka.cruisecontrol.analyzer.goals.DiskUsageDistributionGoal
      sample.store.topic.replication.factor: 3
      partition.metric.sample.store.topic: "__redhat_strimzi.cruisecontrol.partitionmetricsamples"
      broker.metric.sample.store.topic: "__redhat_strimzi.cruisecontrol.modeltrainingsamples"
      metric.reporter.topic: "__redhat_strimzi.cruisecontrol.metrics"
